//视聆通公用javascript库
/// <reference path="jquery-1.3.2-vsdoc2.js" />

var rootpath = "http://" + window.location.host + "/";
//服务端ajax服务页面的路径
var ajaxpath = "http://" + window.location.host + "/ajax/";


//根据对象ID后缀关键字得到jquery对象
function $ById(id) {
    var selecter = "*[id$=" + id.toString() + "]";
    var obj = $('"' + selecter + '"');
    return obj;
}

//根据对象名称后缀关键字得到jquery对象
function $ByName(name) {
    var obj = $("*[name$=" + name + "]");
    return obj;
}

function $byid(id) {
    return $ById(id);
}

//根据对象名称后缀关键字得到jquery对象
function $byname(name) {
    return $ByName(name);
}


//根据对象ID得到javascript对象,注意：此函数仅针对form对象
function $ObjectById(id) {
    var selecter = "*[id$=" + id.toString() + "]";
    var fullid = $('"' + selecter + '"').attr("id");
    var obj = document.getElementById(fullid);
    return obj;
}

function $objectbyid(id) {
    return $ObjectById(id);
}


//根据对象名称得到javascript对象,注意：此函数仅针对form对象
function $ObjectByName(name) {
    var id = $("*[name$=" + name + "]").attr("id");
    var obj = document.getElementById(id);
    return obj;
}

function $objectbyname(name) {
    return $ObjectByName(name);
}

//根据jQuery选择器得到javascript对象
function $ObjectByJQuery(selector) {
    var id = $('"' + selector.toString() + '"').attr("id");
    var obj = document.getElementById(id);
    return obj;
}

function $objectbyjquery(selector) {
    return $ObjectByJQuery(selector);
}

//根据元件Id得到javascript对象
function ObjectForId(Id) {
    var obj = document.getElementById(Id);
    return obj;
}

function objectforid(Id) {
    var obj = document.getElementById(Id);
    return obj;
}



//----------- Ajax数据库操作函数----------------------
//------同步获取数据-------------------
//serverpage 服务页面
function getvaluebypage(serverpage, sql) {
    //post命令中，中文不用编码处理
    ajaxpath = getajaxpath(); //ajaxpath;
    var AjaxServerPage = ajaxpath + serverpage;

    var aObj = $.ajax({
        type: "post",
        url: AjaxServerPage,
        async: false,
        data: { "sql": sql },
        datatype: "text"
    });

    var s = aObj.responseText.toString();
    var i = s.indexOf("</value>");
    s = s.substring(0, i);
    s = s.replace("<value>", "");

    return s;
}

function getsqlvalue(sql) {
    //post命令中，中文不用编码处理

    ajaxpath = getajaxpath(); //获取ajax服务端文件URL地址
    var AjaxServerPage = ajaxpath + "getBySql.aspx";
    //alert(AjaxServerPage);

    var aObj = $.ajax({
        type: "post",
        url: AjaxServerPage,
        async: false,
        data: { "sql": sql },
        datatype: "text"
    }); 

    var s = aObj.responseText.toString();
    var i = s.indexOf("</value>");
    s = s.substring(0, i);
    s = s.replace("<value>", "");

    return s;
}

function $getbysql(serverpage,sql,callbackfun) {

    var result = "";
    
    //post命令中，中文不用编码处理
    //var sql = "select top 1 qybh from t_xtgl_xzqh with (nolock) where qymc = '" + qymc + "' ";
    ajaxpath = getajaxpath(); //ajaxpath; 
    var AjaxServerPage = ajaxpath + serverpage;


    $.post(AjaxServerPage, { Action: "post", "sql": sql }, function(data, textStatus) {

    result = callbackfun(data, textStatus);

    }, "text");

    return result;
}

function $getsqlvalue(serverpage, sql,callback) {

    var result = "";

    //post命令中，中文不用编码处理
    //var sql = "select top 1 qybh from t_xtgl_xzqh with (nolock) where qymc = '" + qymc + "' ";
    ajaxpath = getajaxpath(); //ajaxpath; 
    var AjaxServerPage = ajaxpath + serverpage;


    $.post(AjaxServerPage, { Action: "post", "sql": sql }, function(data, textStatus) {

        if (textStatus == "success") {
            result = data.toString();
            callback(result);
        }

    }, "text");

    
}

function getbysqlCallback(data, textStatus) {
            // data 可以是 xmlDoc, jsonObj, html, text, 等等.
            //this; // 这个Ajax请求的选项配置信息，请参考jQuery.get()说到的this alert(data.result);

    var r = "";
            
    if (textStatus == "success") {
       r = data.toString();
    }

    return r;
            
}

//-------------------园角方框设置------------------------------------------------
function setcorners(cssclass) {
//cssclass  css类
    var settings = {
        tl: { radius: 6 },
        tr: { radius: 6 },
        bl: { radius: 6 },
        br: { radius: 6 },
        antiAlias: true
    }

    curvyCorners(settings, cssclass);
}

function setcornersbyid(aid) {
//aid  控件id
    var settings = {
        tl: { radius: 6 },
        tr: { radius: 6 },
        bl: { radius: 6 },
        br: { radius: 6 },
        antiAlias: true
    }

    var aobj = $byid(aid);
    curvyCorners(settings, aobj);
}

//------------CSS函数---------------------------------
function setcenter(aId) {
//对象放置在浏览器窗口可见区域中间

    var idstr = aId.toString();
    var aObj = $("*[id$=" + idstr + "]");
    var w = parseInt(aObj.css("width"));
    var h = parseInt(aObj.css("height"));

    var BodyWidth = document.body.clientWidth;
    var BodyHigh = document.documentElement.clientHeight;

    var x = parseInt((BodyWidth - w) / 2);
    var y = parseInt((BodyHigh - h) / 2);

    //$("*[id$=outtext]").css("width", "500px");

    //aObj.css("border", "1px solid #a8a8a8");
    aObj.css("left", x);
    aObj.css("top", y);

}

function setfullclient(aId) {
    //对象大小与浏览器内容有效区域相同

    var idstr = aId.toString();
    var aObj = $("*[id$=" + idstr + "]");
    var w = parseInt(aObj.css("width"));
    var h = parseInt(aObj.css("height"));

    var BodyWidth = document.body.clientWidth;
    var BodyHigh = document.documentElement.clientHeight;

    //alert("BodyHigh=" + BodyHigh);
    //alert("BodyWidth=" + BodyWidth);

    aObj.css("left", 0);
    aObj.css("top", 0);
    aObj.css("width", BodyWidth);
    aObj.css("height", BodyHigh);
}

function SetPageMargin() {
	//设置页面边距
	var pagemargin = 115;
	var screenwidth = parseInt(window.screen.width);
	pagemargin = Math.round((screenwidth - 955) / 2);
	
	
	//alert("marginheight=" + marginheight);
	//$(".PageMargin").css("width", pagemargin);
	$(".bgleft").css("width", pagemargin);
	$(".bgright").css("width", pagemargin);
	
	var marginheight = parseInt($(".bgleft").height());
	var BodyHigh = document.body.clientHeight;
	//alert("marginheight=" + marginheight);
	//alert("BodyHigh=" + BodyHigh);
	if (marginheight < BodyHigh)
	{
		marginheight = BodyHigh;
		$(".bgleft").css("height", marginheight);
		$(".bgright").css("height", marginheight);
	}
	
	$(".bgdivleft").css("height", marginheight);
	$(".bgdivright").css("height", marginheight);
	
}

//TABMENU菜单组件对象
var ddtabmenu = {
        disabletablinks: false, //Disable hyperlinks in 1st level tabs with sub contents (true or false)?
        snap2original: [false, 300], //当鼠标指向TAB条空白区域时，是否返回默认选择菜单项Should tab revert back to default selected when mouse moves out of menu? ([true/false, delay_millisec]

        currentpageurl: window.location.href.replace("http://" + window.location.hostname, "").replace(/^\//, ""),
        //get current page url (minus hostname, ie: http://www.dynamicdrive.com/)

        definemenu: function(tabid, dselected) {
            this[tabid + "-menuitems"] = null
            this[tabid + "-dselected"] = -1
            this.addEvent(window, function() { ddtabmenu.init(tabid, dselected) }, "load")
        },

        showsubmenu: function(tabid, targetitem) {
            var menuitems = this[tabid + "-menuitems"]
            this.clearrevert2default(tabid)
            for (i = 0; i < menuitems.length; i++) {
                menuitems[i].className = ""
                if (typeof menuitems[i].hasSubContent != "undefined")
                    document.getElementById(menuitems[i].getAttribute("rel")).style.display = "none"
            }
            targetitem.className = "current"
            if (typeof targetitem.hasSubContent != "undefined")
                document.getElementById(targetitem.getAttribute("rel")).style.display = "block"
        },

        isSelected: function(menuurl) {
            var menuurl = menuurl.replace("http://" + menuurl.hostname, "").replace(/^\//, "")
            return (ddtabmenu.currentpageurl == menuurl)
        },

        isContained: function(m, e) {
            var e = window.event || e
            var c = e.relatedTarget || ((e.type == "mouseover") ? e.fromElement : e.toElement)
            while (c && c != m) try { c = c.parentNode } catch (e) { c = m }
            if (c == m)
                return true
            else
                return false
        },

        revert2default: function(outobj, tabid, e) {
            if (!ddtabmenu.isContained(outobj, tabid, e)) {
                window["hidetimer_" + tabid] = setTimeout(function() {
                    ddtabmenu.showsubmenu(tabid, ddtabmenu[tabid + "-dselected"])
                }, ddtabmenu.snap2original[1])
            }
        },

        clearrevert2default: function(tabid) {
            if (typeof window["hidetimer_" + tabid] != "undefined")
                clearTimeout(window["hidetimer_" + tabid])
        },

        addEvent: function(target, functionref, tasktype) { //assign a function to execute to an event handler (ie: onunload)
            var tasktype = (window.addEventListener) ? tasktype : "on" + tasktype
            if (target.addEventListener)
                target.addEventListener(tasktype, functionref, false)
            else if (target.attachEvent)
                target.attachEvent(tasktype, functionref)
        },

        init: function(tabid, dselected) {
            var menuitems = document.getElementById(tabid).getElementsByTagName("a")
            this[tabid + "-menuitems"] = menuitems
            for (var x = 0; x < menuitems.length; x++) {
                if (menuitems[x].getAttribute("rel")) {
                    this[tabid + "-menuitems"][x].hasSubContent = true
                    if (ddtabmenu.disabletablinks)
                        menuitems[x].onclick = function() { return false }
                    if (ddtabmenu.snap2original[0] == true) {
                        var submenu = document.getElementById(menuitems[x].getAttribute("rel"))
                        menuitems[x].onmouseout = function(e) { ddtabmenu.revert2default(submenu, tabid, e) }
                        submenu.onmouseover = function() { ddtabmenu.clearrevert2default(tabid) }
                        submenu.onmouseout = function(e) { ddtabmenu.revert2default(this, tabid, e) }
                    }
                }
                else //for items without a submenu, add onMouseout effect
                    menuitems[x].onmouseout = function(e) { this.className = ""; if (ddtabmenu.snap2original[0] == true) ddtabmenu.revert2default(this, tabid, e) }
                menuitems[x].onmouseover = function() { ddtabmenu.showsubmenu(tabid, this) }
                if (dselected == "auto" && typeof setalready == "undefined" && this.isSelected(menuitems[x].href)) {
                    ddtabmenu.showsubmenu(tabid, menuitems[x])
                    this[tabid + "-dselected"] = menuitems[x]
                    var setalready = true
                }
                else if (parseInt(dselected) == x) {
                    ddtabmenu.showsubmenu(tabid, menuitems[x])
                    this[tabid + "-dselected"] = menuitems[x]
                }
            }
        }
    }



function GetUrlParms()
//获得url参数
{
    var args=new Object();
    var query=location.search.substring(1);//获取查询串
    var pairs=query.split("&");//在逗号处断开
    for(var   i=0;i<pairs.length;i++)
    {
        var pos=pairs[i].indexOf('=');//查找name=value
            if(pos==-1)   continue;//如果没有找到就跳过
            var argname=pairs[i].substring(0,pos);//提取name
            var value=pairs[i].substring(pos+1);//提取value
            args[argname]=unescape(value);//存为属性
    }
    return args;
}

function GetURLParam(aKey)
//获得url参数
{
    var value = "";
    var args = new Object();
    args = GetUrlParms();
    //如果要查找参数key:
    value = args[aKey];

    return value;
}

//------------CSS函数---------------------------------
function getbodyheight() {
    BodyHight = $(window).height();
    return BodyHight;
}

function GetScreenSize() {
    //获取客户端浏览器的大小信息、工作区大小
    BodyWidth = $(window).width();
    winHeight = $(window).height();
    BodyHight = winHeight;

    var lHeaderHeight = 0;

    var aObj = $byid("tblPageHeader");

    if (aObj.length != 0) {
        lHeaderHeight = parseInt(aObj.height());

    }

    var lFooterHeight = 0;
    aObj = $byid("tblPageFooter");
    if (aObj.length != 0) {
        lFooterHeight = parseInt(aObj.height());
    }

    var lToolBarHeight = 0;
    aObj = $byid("tblToolBar");
    if (aObj.length != 0) {
        lToolBarHeight = parseInt(aObj.height());
    }
    

    lWorkAreaHeight = BodyHight - lHeaderHeight - lFooterHeight - lToolBarHeight;
}

function SaveScreenHeight() {
    //向后台传送客户端浏览器的高度
    BodyHight = $(window).height();

    var lHeaderHeight = 0;

    var aObj = $byid("tblPageHeader");

    if (aObj.length != 0) {
        lHeaderHeight = parseInt(aObj.height());
    }

    var lFooterHeight = 0;
    aObj = $byid("tblPageFooter");
    if (aObj.length != 0) {
        lFooterHeight = parseInt(aObj.height());
    }

    var lToolBarHeight = 0;
    aObj = $byid("tblToolBar");
    if (aObj.length != 0) {
        lToolBarHeight = parseInt(aObj.height());
    }

    lWorkAreaHeight = BodyHight - lHeaderHeight - lFooterHeight - lToolBarHeight;

    ajaxpath = getajaxpath();
    var AjaxServerPage = ajaxpath + "getClientInfo.aspx";

    aObj = $.ajax({
        type: "post",
        url: AjaxServerPage,
        async: true,
        data: {
            "screenheight": BodyHight,
            "workareaheight": lWorkAreaHeight
        },
        datatype: "text"
    });

}


function setpos(aId, x, y) {
    //设置对象的位置
    var idstr = aId.toString();
    var aObj = $("*[id$=" + idstr + "]");
    aObj.css("left", x);
    aObj.css("top", y);
}

function setcenter(aId) {
    //对象放置在浏览器窗口可见区域中间
    var idstr = aId.toString();
    var aObj = $("*[id$=" + idstr + "]");
    var w = parseInt(aObj.css("width"));
    var h = parseInt(aObj.css("height"));

    BodyWidth = $(window).width();
    BodyHight = $(window).height();

    var x = parseInt((BodyWidth - w) / 2);
    var y = parseInt((BodyHight - h) / 2);

    aObj.css("left", x);
    aObj.css("top", y);

}

function setfullclient(aId) {
    //设置对象大小与浏览器内容有效区域相同
    var idstr = aId.toString();
    var aObj = $("*[id$=" + idstr + "]");
    //var w = parseInt(aObj.css("width"));
    //var h = parseInt(aObj.css("height"));
    WinWidth = $(window).width();
    BodyWidth = $(window).width();
    BodyHight = $(window).height();

    aObj.css("left", 0);
    aObj.css("top", 0);
    aObj.css("width", BodyWidth + "px");
    aObj.css("height", BodyHight + "px");
}

function setdraggable(id, dragId) {
    /// <summary>
    /// jQueryUI拖动函数,注意需要引用jquery.ui.core.js和jquery.ui.draggable.js
    /// </summary>
    /// <param name="id">要拖动的控件id</param>
    /// <param name="dragId">拖动区域的class名</param>
    $byid(id).draggable({
        handle: dragId
    });
}

function setheight(aId, aheight) {
    //对象大小与浏览器内容有效区域相同
    var idstr = aId.toString();
    var aObj = $("*[id^=" + idstr + "]");
    //var w = parseInt(aObj.css("width"));
    //var h = parseInt(aObj.css("height"));
    aObj.css("height", aheight + "px");
}

function SetGridSize(aGrid, aOtherHeight) {
    //设置AspxGridView的宽度、高度
    GetScreenSize();
    var GridHeight = lWorkAreaHeight - aOtherHeight;
    var GridWidth = BodyWidth - 16;
    aGrid.SetHeight(GridHeight);
    aGrid.SetWidth(GridWidth);

    $(window).resize(function (e) {
        GetScreenSize();
        var GridHeight = lWorkAreaHeight - aOtherHeight;
        var GridWidth = BodyWidth - 16;
        aGrid.SetHeight(GridHeight);
        aGrid.SetWidth(GridWidth);
    });

}

function SetAspxObjSize(aObj, aOtherHeight) {
    //设置DevExpress Aspx对象的宽度、高度
    GetScreenSize();
    var GridHeight = lWorkAreaHeight - aOtherHeight;
    var GridWidth = BodyWidth - 16;
    aObj.SetHeight(GridHeight);
    aObj.SetWidth(GridWidth);

    $(window).resize(function (e) {
        GetScreenSize();
        var GridHeight = lWorkAreaHeight - aOtherHeight;
        var GridWidth = BodyWidth - 16;
        aObj.SetHeight(GridHeight);
        aObj.SetWidth(GridWidth);
    });

}

function SetObjHeight(aObj, aOtherHeight) {
    //设置纯javascript对象的高度
    GetScreenSize();
    var GridHeight = lWorkAreaHeight - aOtherHeight;
    //var GridWidth = BodyWidth;
    aObj.Height = GridHeight;

    $(window).resize(function (e) {
        GetScreenSize();
        var GridHeight = lWorkAreaHeight - aOtherHeight;
        //var GridWidth = BodyWidth;
        aObj.Height = GridHeight;
    });
}

function SetDivHeight(aObj, aOtherHeight) {
    //设置Div对象的高度
    GetScreenSize();
    var GridHeight = lWorkAreaHeight - aOtherHeight;
    //var GridWidth = BodyWidth;
    aObj.offsetHeight = GridHeight;


    $(window).resize(function (e) {
        GetScreenSize();
        var GridHeight = lWorkAreaHeight - aOtherHeight;
        //var GridWidth = BodyWidth;
        aObj.offsetHeight = GridHeight;
    });
}

function SetDivHeightById(aId, aOtherHeight) {
    //根据id，设置Div对象的高度
    GetScreenSize();
    var GridHeight = lWorkAreaHeight - aOtherHeight;
    //var GridWidth = BodyWidth;
    var aObj = document.getElementById(aId);
    aObj.style.height = GridHeight + "px";


    $(window).resize(function (e) {
        GetScreenSize();
        var GridHeight = lWorkAreaHeight - aOtherHeight;
        //var GridWidth = BodyWidth;
        var aObj = document.getElementById(aId);
        aObj.style.height = GridHeight + "px";

    });
}

function $SetHeight(aId, aOtherHeight) {
    //用jQuery方式，根据对象id，设置对象的高度
    GetScreenSize();
    var aHeight = lWorkAreaHeight - aOtherHeight;
    var idstr = aId.toString();
    var aObj = $("*[id$=" + idstr + "]");
    aObj.css("height", aHeight + "px");


    $(window).resize(function (e) {
        GetScreenSize();
        var aHeight = lWorkAreaHeight - aOtherHeight;
        var idstr = aId.toString();
        var aObj = $("*[id$=" + idstr + "]");
        aObj.css("height", aHeight + "px");
    });
}

function SetHeightById(aId, aOtherHeight) {
    //设置对象的高度
    GetScreenSize();
    var aHeight = lWorkAreaHeight - aOtherHeight;
    var idstr = aId.toString();
    var aObj = $("*[id$=" + idstr + "]");
    aObj.css("height", aHeight);


    $(window).resize(function (e) {
        GetScreenSize();
        var aHeight = lWorkAreaHeight - aOtherHeight;
        var idstr = aId.toString();
        var aObj = $("*[id$=" + idstr + "]");
        aObj.css("height", aHeight);
    });
}

function SetGridHeight(aGrid, aOtherHeight) {
    //设置AspxGridView的高度
    GetScreenSize();
    var GridHeight = lWorkAreaHeight - aOtherHeight;
    //var GridWidth = BodyWidth;
    aGrid.SetHeight(GridHeight);
    //aGrid.SetWidth(aWidthPercent);

    $(window).resize(function (e) {
        GetScreenSize();
        var GridHeight = lWorkAreaHeight - aOtherHeight;
        //var GridWidth = BodyWidth;
        aGrid.SetHeight(GridHeight);
        //aGrid.SetWidth(aWidthPercent);
    });
}

function SetAspxObjHeight(aObj, aOtherHeight) {
    //设置DevExpress Aspx的高度
    GetScreenSize();
    var aHeight = lWorkAreaHeight - aOtherHeight;
    aObj.SetHeight(aHeight);

    $(window).resize(function (e) {
        GetScreenSize();
        var aHeight = lWorkAreaHeight - aOtherHeight;
        aObj.SetHeight(aHeight);
    });

}

//-------------------------------- ASHX调用函数----------------------------------------


function AjaxCall(aHandler, aJsonObj) {
    /// <summary>
    /// Ajax调用后台服务程序
    /// </summary>
    /// <param name="aHandler">后台服务程序，如ashx文件</param>
    /// <param name="aJsonObj">参数对象，用json对象表示，如：{"cmd": "get","key": aKey}</param>
    /// <returns type="">返回经utf8解码后的字符串</returns>

    ajaxpath = getajaxpath();
    var AjaxServerPage = ajaxpath + aHandler;

    var aObj = $.ajax({
        type: "post",
        url: AjaxServerPage,
        async: false, //采用同步方式获取数据
        data: aJsonObj,
        datatype: "text"
    });
    //event.preventDefault();
    var r = aObj.responseText;
    var s = "";
    if (r != undefined && r != null)
        s = r.toString();
    else
        return "-1"; //调用失败

    s = unescape(s);
    s = UnTagStr(s, "value");
    return s;
}


function AjaxCallBack(aHandler, aJsonObj, aCallBackFunc) {
    /// <summary>
    /// Ajax调用后台服务程序,成功后调用回调函数aCallBackFunc,并传递解码后的结果参数
    /// </summary>
    /// <param name="aHandler">后台服务页面名称，如ashx文件</param>
    /// <param name="aJsonObj">参数Json对象，如：{"cmd": "get","key": aKey}</param>
    /// <param name="aCallBackFunc">回调函数</param>

    ajaxpath = getajaxpath();
    var AjaxServerPage = ajaxpath + aHandler;

    var aObj = $.ajax({
        type: "post",
        url: AjaxServerPage,
        async: true, //采用异步方式获取数据
        data: aJsonObj,
        datatype: "text",
        success: function (data) {
            var s = data.toString();
            s = unescape(s);
            s = UnTagStr(s, "value");
            aCallBackFunc(s);
        }
    });
}

function GetAjaxDataByKey(aHandler, aKey) {
    //根据Key值，从后台服务程序取数据

    // aKey     键值
    // aHandler 后台服务程序，如ashx文件
    // 返回字符串

    //post命令中，中文不用编码处理

    var s = AjaxCall(aHandler, {
        "cmd": "get",
        "key": aKey
    });

    return s;
}

function GetAjaxStatus(aHandler, aCmd, aData) {
    //根据Key值，从后台服务程序取数据

    // aKey     键值
    // aData	Json对象
    // aHandler 后台服务程序，如ashx文件
    // 返回字符串

    //post命令中，中文不用编码处理
    var s = AjaxCall(aHandler, {
        "cmd": "get",
        "key": aCmd,
        "data": aData
    });

    return s;
}

function PostAjaxDataByKey(aHandler, aKey, aData) {
    //根据Key值，向后台服务程序提交数据

    // aKey     键值
    // aHandler 后台服务程序，如ashx文件
    // aData    数据

    //返回约定：-1 提交失败 1 提交成功 


    //post命令中，中文不用编码处理
    var s = AjaxCall(aHandler, {
        "cmd": "post",
        "key": aKey,
        "data": aData
    });

    return s;
}




function writesyslog(object, objectid, operate, notes) {
    ///记录操作日志
    var log = { "usercode": "", "username": "", "object": "", "objectid": "", "operate": "", "notes": "" };
    log.usercode = usercode;
    log.username = username;
    log.object = object;
    log.objectid = objectid;
    log.operate = operate;
    log.notes = notes;
    var aData = JsonToStr(log);

    JsonInsert("t_sys_logs", "id", "-1", aData);
}

//-------------------------------- 字符串应用函数 --------------------------------------
function UnTagStr(aStr, aTag) {
    //把字符串值从一对标识中取出，如：
    //      s = "<value>这是一个返回值</value>";
    //      var v = UnTagStr(s,"value");
    //则v为：这是一个返回值

    var s = aStr;
    var tag1 = "<" + aTag + ">";
    var tag2 = "</" + aTag + ">";

    var i = s.indexOf(tag2);
    if (i != -1) {
        s = s.substring(0, i);
        i = s.indexOf(tag1);
        if (i != -1) {
            s = s.substring(i, s.length);
            s = s.replace(tag1, "");
        }
    }
    return s;
}

function replace(str, s1, s2) {
    //字符串全部替换函数，把str中的s1全部替换为s2
    if (str == undefined || str == null || str == "") return "";
    var s = str;
    while (s.indexOf(s1) != -1) {
        s = s.replace(s1, s2);
    }
    return s;
}

function replaceall(str, s1, s2) {
    //字符串全部替换函数，把str中的s1全部替换为s2
    if (str == undefined || str == null || str == "") return "";
    var s = str;
    //var mask = '/' + s1 + "/g";
    var Pattern = new RegExp(s1, "g");
    s = s.replace(Pattern, s2);

    return s;
}

String.prototype.replaceAll = function (searchStr, replaceWith, ignoreCase) {
    if (!RegExp.prototype.isPrototypeOf(searchStr)) {
        return this.replace(new RegExp(searchStr, (ignoreCase ? "gi" : "g")), replaceWith);
    } else {
        return this.replace(searchStr, replaceWith);
    }
}


function replaceln(aStr) {
    //替换回车换行为HTML<br>标识，用于多行文本在网页上的正确显示
    var regR = /[\r]/g;
    var regN = /[\n]/g;

    aStr = aStr.replace(regR, "<br>");
    aStr = aStr.replace(regN, "");

    return aStr;
}

function replacelnwithbr(aStr) {
    //替换回车换行为HTML<br>标识，用于多行文本在网页上的正确显示
    aStr = replace(aStr, "\r\n", "<br>");
    aStr = replace(aStr, "\r", "<br>");
    aStr = replace(aStr, "\n", "<br>");

    return aStr;
}

function replacebrwithln(aStr) {
    //替换<br>标识为回车换行，用于保存数据库
    aStr = replace(aStr, "<br>", "\r\n");

    return aStr;
}

function trimall(str) {
    /// <summary>
    /// 删除字符串中的全部空格，包括全角、半角空格
    /// </summary>
    /// <param name="str"></param>
    /// <returns type=""></returns>
    var s = str;
    s = replace(s, ' ', '');//删除半角空格
    s = replace(s, '　', ''); //删除全角空格
    return s;
}


function StrIsNull(aStr) {
    //判断字符串是否确实为空
    var r = (aStr == undefined || aStr == null || aStr == "") ? true : false;
}


function GetTagLeftStr(aStr, aTag) {
    //取指定标识字符串左边的字符，如：
    //      str = "值1=值2";
    //      var v = GetTagLeftStr(str,"=");
    //      返回：值1

    var s = aStr;
    var i = s.indexOf(aTag);
    s = s.substring(0, i);
    s = replace(s, aTag, "");
    return s;
}

function GetTagRightStr(aStr, aTag) {
    //取指定标识字符串右边的字符，如：
    //      s = "值1=值2";
    //      var v = GetTagRightStr(s,"=");
    //      返回：值2

    var s = aStr;
    var s1 = GetTagLeftStr(aStr, aTag);
    s = replace(s, s1 + aTag, "");
    s = replace(s, aTag, "");
    return s;
}

function LeftStr(aStr, aLen) {
    //取字符串左边的字符
    var s = aStr;
    s = s.substring(0, aLen);
    return s;
}


function RightStr(aStr, aLen) {
    //取字符串右边的字符
    var s = aStr;
    s = s.substring(aStr.length - aLen, aStr.length);
    return s;
}

//-------------------------------- JSON 应用函数 --------------------------------------
function GetJsonKey(aKey, aValue) {
    if (aValue == null) aValue = "";
    return "\"" + aKey.toString() + "\":\"" + aValue.toString() + "\"";
}

function StrToJson(aStr) {
    //把字符串对象转换为json对象，以便于访问
    //var obj = $.secureEvalJSON(aStr);
    if (aStr == "") return null;
    var obj = eval("(" + aStr + ")");
    return obj;
}

function StrEvalJson(aStr) {
    //把字符串对象转换为json对象，以便于访问
    if (aStr == "") return null;
    var obj = eval("(" + aStr + ")");
    return obj;
}

function JsonToStr(aJson) {
    //把json对象转换为字符串,以便于传输
    //var str = $.toJSON(aJson);
    var str = JSON.stringify(aJson);
    return str;
}

function GetSelectJsonStr(aTable, aKeyField, aKey, aFieldList) {
    //根据Key值，向后台服务程序提交数据，返回指定字段的json串

    // aTable   表名
    // aKeyField    关键字段名
    // aKey     键值
    // aFieldList    要查询的字段列表

    //返回约定：-1 提交失败 1 提交成功 


    //post命令中，中文不用编码处理
    var s = AjaxCall("dbHandler.ashx", {
        "cmd": "select",
        "table": aTable,
        "keyfield": aKeyField,
        "key": aKey,
        "data": aFieldList
    });

    return s;
}



function JsonSelect(aTable, aKeyField, aKey, aFieldList, aCallBackFunc) {
    //根据Key值，向后台服务程序提交数据，返回指定字段的json串,并传递给aCallBackFunc回调函数

    // aTable   表名
    // aKeyField    关键字段名
    // aKey     键值
    // aFieldList    要查询的字段列表

    //返回约定：-1 提交失败 1 提交成功 
    //post命令中，中文不用编码处理
    AjaxCallBack("dbHandler.ashx", {
        "cmd": "select",
        "table": aTable,
        "keyfield": aKeyField,
        "key": aKey,
        "data": aFieldList
    }, function (s) {
        aCallBackFunc(s);
    });
}


function JsonInsert(aTable, aKeyField, aKey, aData) {
    //根据Key值，向后台服务程序提交数据

    // aTable   表名
    // aKeyField    关键字段名
    // aKey     键值
    // aData    数据，以json字符串表示{"字段名1":值1,...,"字段名N":值N}

    //返回约定：-1 提交失败 1 提交成功 -2 记录已经存在


    //post命令中，中文不用编码处理
    var s = AjaxCall("dbHandler.ashx", {
        "cmd": "insert",
        "table": aTable,
        "keyfield": aKeyField,
        "key": aKey,
        "data": aData
    });

    return s;
}

function JsonUpdate(aTable, aKeyField, aKey, aData) {
    //根据Key值，向后台服务程序提交数据

    // aTable   表名
    // aKeyField    关键字段名
    // aKey     键值
    // aData    数据，以json字符串表示 {"字段名1":值1,...,"字段名N":值N}

    //返回约定：-1 提交失败 1 提交成功 


    //post命令中，中文不用编码处理
    var s = AjaxCall("dbHandler.ashx", {
        "cmd": "update",
        "table": aTable,
        "keyfield": aKeyField,
        "key": aKey,
        "data": aData
    });
    return s;
}

function JsonDelete(aTable, aKeyField, aKey) {
    //根据Key值，向后台服务程序提交数据

    // aTable   表名
    // aKeyField    关键字段名
    // aKey     键值

    //返回约定：-1 提交失败 1 提交成功 


    //post命令中，中文不用编码处理
    var s = AjaxCall("dbHandler.ashx", {
        "cmd": "delete",
        "table": aTable,
        "keyfield": aKeyField,
        "key": aKey
    });


    return s;
}
//-------------------------------- JSON 应用函数 -------------------------------------- end


function isnullstr(value) {
    var r = (value == null) ? "0" : value;

    r = (r == "") ? "0" : r;
    return r;
}

function SafeFloat(aValue) {
    //安全字符串浮点数转换函数  非法值转为0.00
    var v = Number(aValue);
    if (isNaN(v)) {
        return 0.00;
    }

    return parseFloat(v);
}

function SafeInt(aValue) {
    //安全字符串整数转换函数  非法值转为0
    var v = Number(aValue);

    if (isNaN(v)) {
        return 0;
    }

    return parseInt(v);
}

//--------------------------------数据UI控件操作函数-------------------------------

function SetASPxComboBox(aCombobox, aValue) {
    //ASPxComboBox赋值
    var obj = aCombobox.FindItemByValue(aValue);
    if (obj != null)
        aCombobox.SetSelectedItem(obj);
    else
        aCombobox.SetSelectedIndex(0);
}

function SetCheckbox(aId, aValue) {
    //CheckBox赋值
    if (aValue == "True")
        $byid(aId).attr("checked", true);
    else
        $byid(aId).attr("checked", false);
}

function SetAspxDate(aObj, aValue) {
    //ASPxDateEdit赋值
    if (aValue != "" && aValue != NaN) {
        var s = aValue;
        s = replace(s, "/", "-");
        aObj.SetDate(parseDate(s));
        //aObj.Date = parseDate(aValue);
    }
    else
        aObj.SetText("");
}


function GetASPxComboBoxValue(aCombobox) {
    //ASPxComboBox取值
    var aValue = "";
    var obj = aCombobox.GetSelectedItem();
    if (obj != null)
        aValue = obj.value;

    return aValue;
}

function GetCheckboxValue(aId) {
    //CheckBox取值
    var aValue = "0";
    //var v = $byid(aId).attr("checked");

    aValue = $byid(aId).attr("checked") == "checked" ? "1" : "0";

    return aValue;

}

function GetAspxDateValue(aObj) {
    //ASPxDateEdit取值
    var aValue = "";
    aValue = aObj.GetText();
    return aValue;
}

function SetColText(aGridObj, aFieldName, aValue) {
    //设置DevExpress GridView列的显示内容,tds为选中行的jQuery单元格对象
    //tds取法： tds = $("table[id^=表id] tr[id^=行id" + RowIndex + "] td");
    var col = aGridObj.GetColumnByField(aFieldName);
    var idx = col.index;
    tds.eq(idx).text(aValue);
}

//----消息处理函数--------------------------------------------------------------------------------------------
function PostMessage(aMessageId, aMessageType, aTitle, aMessage, aTable, aKey, aTargets) {

    //发送消息 
    // <summary>
    // 发送消息给多个用户或角色，aMessageId 消息号，aMessageType 消息类型， aMessage 消息内容，aTable 影响表名，aKey 影响记录键值，
    // aSender 发送者人员编号， aTarget 接收者人员编号列表、角色列表串，以西文逗号分隔
    // </summary>

    var aSender = username;
    var msgjson = { "aMessageId": aMessageId, "aMessageType": aMessageType, "aTitle": aTitle, "aMessage": aMessage, "aTable": aTable, "aKey": aKey, "aSender": aSender, "aTargets": aTargets };
    var msgstr = JsonToStr(msgjson);
    var s = AjaxCall("msgHander.ashx", {
        "cmd": "post",
        "msg": msgstr
    });

    return s;
}




function HasMessage() {
    //测试当前用户是否有消息
    var s = AjaxCall("msgHander.ashx", {
        "cmd": "test"
    });

    var json = StrToJson(s);
    MinMessageRowId = json.minrowid;
    MaxMessageRowId = json.maxrowid;
    TotMessageCount = parseInt(json.count);
    return (TotMessageCount > 0) ? true : false;
}

function HasZcxgSpbg() {
    //测试当前用户是否有职称修改审批的报告
    var s = AjaxCall("msgHander.ashx", {
        "cmd": "getzcxgspbgcount"
    });

    var json = StrToJson(s);
    TotMessageCount = parseInt(json.count);
    return (TotMessageCount > 0) ? true : false;
}

function HasNewSpbg() {
    //测试当前用户是否有需要审批的报告
    var s = AjaxCall("msgHander.ashx", {
        "cmd": "getnewspbgcount"
    });
    var json = StrToJson(s);
    TotMessageCount = parseInt(json.count);
    return (TotMessageCount > 0) ? true : false;
}


function HasExeSpbg() {
    //测试当前用户是否有需要执行的报告
    var s = AjaxCall("msgHander.ashx", {
        "cmd": "getexespbgcount"
    });

    var json = StrToJson(s);
    TotMessageCount = parseInt(json.count);
    return (TotMessageCount > 0) ? true : false;
}

function HasRedoSpbg() {
    //测试当前用户是否有发回重作的报告
    var s = AjaxCall("msgHander.ashx", {
        "cmd": "getredospbgcount"
    });

    var json = StrToJson(s);
    TotMessageCount = parseInt(json.count);
    return (TotMessageCount > 0) ? true : false;
}

function HasNoticeSpbg() {
    //测试当前用户是否有通知报告
    var s = AjaxCall("msgHander.ashx", {
        "cmd": "getnoticespbgcount"
    });

    var json = StrToJson(s);
    TotMessageCount = parseInt(json.count);
    return (TotMessageCount > 0) ? true : false;
}


//业务消息函数
function CheckMsg() {
    var msg = "";
    var cnt = 0;
    var idx = 0;


    /*
    if (HasZcxgSpbg()) {
        rootpath = getroot();
        cnt = cnt + 1;
        msg = msg + "<br><br>" + cnt.toString() + "、有" + TotMessageCount.toString() + "份报告需要进行人员的职称确认，请点击<a href=\"" + rootpath + "hrSP/SpbgIndex.aspx?style=6\" target=\"_blank\">“打开报告”<\/a>进行处理！<br>---------------------------------------------------------------";
    }
    */

    if (HasNewSpbg()) {
        rootpath = getroot();
        cnt = cnt + 1;
        msg = msg + "<br><br>" + cnt.toString() + "、有" + TotMessageCount.toString() + "份报告需要审批，请点击<a href=\"" + rootpath + "hrSP/spAuditIndex.aspx?style=2\" target=\"_blank\">“打开报告”<\/a>进行处理！<br>---------------------------------------------------------------";
    }

    if (HasExeSpbg()) {
        rootpath = getroot();
        cnt = cnt + 1;
        msg = msg + "<br><br>" + cnt.toString() + "、有" + TotMessageCount.toString() + "份报告已经审批通过，需要您作后续业务处理，请点击<a href=\"" + rootpath + "hrSP/spExecIndex.aspx?style=2\" target=\"_blank\">“打开报告”<\/a>进行处理！<br>---------------------------------------------------------------";
    }

    if (HasRedoSpbg()) {
        rootpath = getroot();
        cnt = cnt + 1;
        msg = msg + "<br><br>" + cnt.toString() + "、有" + TotMessageCount.toString() + "份报告被发回重作，需要您修改后重新申报，请点击<a href=\"" + rootpath + "hrSP/SpbgIndex.aspx?style=5\" target=\"_blank\">“打开报告”<\/a>进行处理！<br>---------------------------------------------------------------";
    }


    if (HasNoticeSpbg()) {
        rootpath = getroot();
        cnt = cnt + 1;
        msg = msg + "<br><br>" + cnt.toString() + "、有" + TotMessageCount.toString() + "份报告已处理完毕，通知您查阅，请点击<a href=\"" + rootpath + "hrSP/spNoticeIndex.aspx?style=2\" target=\"_blank\">“打开报告”<\/a>进行查阅处理！<br>---------------------------------------------------------------";
    }

    if (HasMessage()) {
        cnt = cnt + 1;
        rootpath = getroot();
        msg = cnt.toString() + "、业务通知消息，请点击<a href=\"" + rootpath + "UserMessageList.aspx\" target=\"_blank\">“打开业务消息”<\/a>进行处理。工作过程中，随时可以通过点击页面上方<a href=\"" + rootpath + "UserMessageList.aspx\" target=\"_blank\">【我的消息】<\/a>链接，打开消息页面！<br>---------------------------------------------------------------";
    }

    if (typeof MsgPopup == "undefined") return;
    if (MsgPopup != null && msg != "") {
        msg = "【" + username + "】请注意，您有" + cnt.toString() + "条消息：" + "<br>---------------------------------------------------------------" + "<br><br>" + msg;
        MsgPopup.SetContentHtml(msg);
        MsgPopup.Show();
    }
}

//---------------------------------业务函数 begin-----------------------------------------------------
function GetSubjectOptions(aPerportyName, aCodeField) {
    /// <summary>
    /// 根据科目代码分类、指定代码值，取科目的指定字段json对象，没有返回值，结果为null
    /// </summary>
    /// <param name="aPerportyName">代码分类</param>
    /// <param name="aCodeField">代码字段名称，如："id"、"code"</param>
    /// <returns type="">json对象</returns>
    //post命令中，中文不用编码处理
    var s = AjaxCall("SubjectHandler.ashx", {
        "cmd": "getoptions",
        "perportyname": aPerportyName,
        "data": aCodeField
    });

    if (s == "-1") return null;

    var r = StrToJson(s);
    return r;
}

function GetSubjectTree(aPerportyName, aFieldList) {
    /// <summary>
    /// 根据科目代码分类、指定代码值，取科目的指定字段json对象，没有返回值，结果为null
    /// </summary>
    /// <param name="aPerportyName">代码分类</param>
    /// <param name="aFieldList">要取的字段列表</param>
    /// <returns type="">json对象</returns>
    //post命令中，中文不用编码处理
    var s = AjaxCall("SubjectHandler.ashx", {
        "cmd": "getsubtree",
        "perportyname": aPerportyName,
        "data": aFieldList
    });

    if (s == "-1") return null;
    var s1 = decode64(s);
    var s3 = zip_inflate(s1);
    var s4 = unescape(s3);
    var r = StrToJson(s4);
    return r;
}

function GetSubjectById(aId, aFieldList) {
    //根据id值，取科目指定字段的json对象，没有返回值，结果为null
    // aId             科目编码
    // aFieldList    要查询的字段列表
    //返回约定：-1 提交失败 1 提交成功 
    //post命令中，中文不用编码处理
    var s = AjaxCall("SubjectHandler.ashx", {
        "cmd": "getbyid",
        "id": aId,
        "data": aFieldList
    });

    if (s == "-1") return null;

    var r = StrToJson(s);
    return r;
}

function GetSubjectByCode(aPerportyName, aCode, aFieldList) {
    //根据科目代码分类、指定代码值，取科目的指定字段json对象，没有返回值，结果为null
    //aPerportyName         代码分类         
    // aCode                       指定代码
    // aFieldList    要查询的字段列表
    //返回约定：-1 提交失败 1 提交成功 
    //post命令中，中文不用编码处理
    var s = AjaxCall("SubjectHandler.ashx", {
        "cmd": "getbycode",
        "perportyname": aPerportyName,
        "code": aCode,
        "data": aFieldList
    });

    if (s == "-1") return null;

    var r = StrToJson(s);
    return r;
}

function GetParentByCode(aPerportyName, aCode, aFieldList) {
    //根据科目代码分类、指定代码值，取科目的父节点的指定字段json对象，没有返回值，结果为null
    //aPerportyName         代码分类         
    // aCode                       指定代码
    // aFieldList    要查询的字段列表
    //返回约定：-1 提交失败 1 提交成功 
    //post命令中，中文不用编码处理

    var s = AjaxCall("SubjectHandler.ashx", {
        "cmd": "getparentbycode",
        "perportyname": aPerportyName,
        "code": aCode,
        "data": aFieldList
    });

    if (s == "-1") return null;

    var r = StrToJson(s);
    return r;
}


function clone(jsonObj) {
    //克隆对象
    var buf;
    if (jsonObj instanceof Array) {
        buf = [];
        var i = jsonObj.length;
        while (i--) {
            buf[i] = clone(jsonObj[i]);
        }
        return buf;
    } else if (jsonObj instanceof Object) {
        buf = {};
        for (var k in jsonObj) {
            buf[k] = clone(jsonObj[k]);
        }
        return buf;
    } else {
        return jsonObj;
    }
}


function GetServerDate() {
    /// <summary>
    /// 取服务器日期，格式：yyyy-MM-dd
    /// </summary>
    /// <returns type=""></returns>
    var s = AjaxCall("serverinfo.ashx", {
        "cmd": "get"
    });

    var jsoninfo = StrToJson(s);
    var ldate = jsoninfo.date;
    return ldate;
}

function GetServerDateTiem() {
    /// <summary>
    /// 取服务器时间，格式：yyyy-MM-dd HH:mm:ss
    /// </summary>
    /// <returns type=""></returns>
    var s = AjaxCall("serverinfo.ashx", {
        "cmd": "get"
    });

    var jsoninfo = StrToJson(s);
    var ltime = jsoninfo.time;
    return ltime;
}


function getpassword(length, special) {
    //随机生成密码
    var iteration = 0;
    var password = "";
    var randomNumber;
    if (special == undefined) {
        var special = false;
    }
    while (iteration < length) {
        randomNumber = (Math.floor((Math.random() * 100)) % 94) + 33;
        if (!special) {
            if ((randomNumber >= 33) && (randomNumber <= 47)) { continue; }
            if ((randomNumber >= 58) && (randomNumber <= 64)) { continue; }
            if ((randomNumber >= 91) && (randomNumber <= 96)) { continue; }
            if ((randomNumber >= 123) && (randomNumber <= 126)) { continue; }
        }
        iteration++;
        password += String.fromCharCode(randomNumber);
    }
    return password;
}

//--------JQueryUI Autocomplete 函数-----------------------------------------------------------------------


var LabelValue = function (label, value) {
    /// <summary>
    /// 用于jQueryUI autocomplete的选项对象
    /// </summary>
    /// <param name="label"></param>
    /// <param name="value"></param>
    var self = this;
    self.label = ko.observable(label);
    self.value = ko.observable(value);

    self.label.subscribe(function () {
        self.value(self.label());
    });
};

function SetAutocompleteHover() {
    $(".ui-autocomplete").hover(
         function () { },
         function () {
             $(".ui-autocomplete").hide();
         });
}

//ko.bindingHandlers.autocomplete_qjlb_options = {
var BindAutocomplete = function (element, aSource, aKoLabel, aKoValue, aCallBack) {
    //function BindAutocomplete(element, aSource, aLabelValue, aLabel, aValue) {
    /// <summary>
    /// ko绑定事件中，绑定jQueryUI autocomplete控件
    /// </summary>
    /// <param name="element">事件element参数</param>
    /// <param name="aSource">数据源Json对象</param>
    /// <param name="aLabelValue"></param>
    /// <param name="aKoLabel"></param>
    /// <param name="aKoValue"></param>
    var self = this;

    var context = ko.contextFor(element);

    $(element).click(function (ev) {
        ev.preventDefault();
        ev.stopPropagation();
        ev.cancelBubble = true;
        //var oldValue = context.$data.value().label();
        $(".ui-autocomplete").hide();

        var inputElement = $(element).catcomplete({

            delay: 0,
            minLength: 0,
            position: { my: "left top", at: "left bottom" },
            open: function () { $(element).catcomplete("widget").width(200); },
            source: aSource,//context.$data.Json_Qjlb, // context.$data.options_qjlb,
            select: function (event, ui) {
                //设置context.$data.value 为：选定的item；
                var label = trimall(ui.item.label);
                var value = ui.item.value;
                //aLabelValue(new LabelValue(label, value));
                aKoLabel(label);
                aKoValue(value);
                if (aCallBack != undefined)
                    aCallBack(label, value);
                event.preventDefault();
                return false;

            }
        });


        //显示菜单
        inputElement.catcomplete("search", "");

        SetAutocompleteHover();
    });
};

function ArrayToJsonStr(aNames, aValues) {
    /// <summary>
    /// 生成提交数据Json对象字符串
    /// </summary>
    /// <param name="aNames">字段名称数组</param>
    /// <param name="aValues">字段值数组</param>
    if (aNames.length == 0)
        return "";
    var str = "";
    for (i = 0; i < aNames.length; i++) {
        var aName = aNames[i];
        var aValue = aValues[i];
        var aItem = aName + ":\"" + aValue + "\"";
        if (i == 0) {
            str = aItem;
        }
        else
            str = str + "," + aItem;
    }
    str = "{" + str + "}";
    return str;
}

function DateValid(aDateStr, aLabel) {
    /// <summary>
    /// 日期检查
    /// </summary>
    /// <param name="aDateStr">日期串</param>
    /// <param name="aLabel">项目中文名</param>
    /// <returns type="">true 合法 false 不合法</returns>

    if (aDateStr == null || aDateStr == "") {
        alert("请输入" + aLabel + "!");
        return false;
    }

    var r = IsValidDate(aDateStr);
    if (r == false) {
        alert(aLabel + "不合法，请重新输入！");
        return false;
    }

    return r;
}

function ASPxDateEditValid(aControl, aLabel) {
    /// <summary>
    /// ASPxDateEdit日期控件检查
    /// </summary>
    /// <param name="aControl">ASPxDateEdit日期控件</param>
    /// <param name="aLabel">项目中文名</param>
    /// <returns type="">true 合法 false 不合法</returns>
    var s = aControl.GetText();
    if (s == null || s == "") {
        alert("请输入" + aLabel + "!");
        aControl.Focus();
        return false;
    }
    var r = IsValidDate(s);
    if (r == false) {
        alert(aLabel + "不合法，请重新输入！");
        aControl.Focus();
        return false;
    }
    return r;
}

function OnlyNum(event, obj) {
    /// <summary>
    /// 限制控件只能输入数字，
    /// 使用方法：<input id="input1" onKeyUp="OnlyNum(event,this)" onBlur="CheckNum(this)"> 
    /// </summary>
    //响应鼠标事件，允许左右方向键移动 
    event = window.event || event;
    if (event.keyCode == 37 || event.keyCode == 39) {
        return;
    }
    //先把非数字的都替换掉，除了数字和. 
    obj.value = obj.value.replace(/[^\d.]/g, "");
    //必须保证第一个为数字而不是. 
    obj.value = obj.value.replace(/^\./g, "");
    //保证只有出现一个.而没有多个. 
    obj.value = obj.value.replace(/\.{2,}/g, ".");
    //保证.只出现一次，而不能出现两次以上 
    obj.value = obj.value.replace(".", "$#$").replace(/\./g, "").replace("$#$", ".");
}
function CheckNum(obj) {
    //去除最后一个. 
    obj.value = obj.value.replace(/\.$/g, "");
}

function GetToDayStr() {
    var newDateObj = new Date();
    var dtstr = newDateObj.Format("yyyy-MM-dd");
    return dtstr;
}

function GetNowStr() {
    var newDateObj = new Date();
    var dtstr = newDateObj.Format("yyyy-MM-dd HH:mm:ss");
    return dtstr;
}


//----------对话框----------------------------------------
//锁定背景屏幕
function lockScreen() {
    var clientH = $(window).height(); //浏览器高度
    var clientW = $(window).width(); //浏览器宽度
    var PageWidth = document.body.scrollWidth;
    var PageHeight = document.body.scrollHeight;
    //var docH = $("body").height();        //网页高度
    //var docW = $("body").width();        //网页宽度
    var bgW = clientW > PageWidth ? clientW : PageWidth; //取有效宽
    var bgH = clientH > PageHeight ? clientH : PageHeight; //取有效高
    if ($("#iFrameLock").length == 0) { //判断DIV是否存在
        $("body").append('<iframe id="iFrameLock" HSPACE="0" VSPACE="0" frameborder="no" border="0" marginwidth="0" marginheight="0" scrolling="no" style="Z-INDEX:988;opacity:0.5;background-color:#808080;LEFT: 0px;TOP:0px;WIDTH:100%;POSITION:relative;HEIGHT:100%;">' +
        '</iframe>' +
        '<div id="divLock" HSPACE="0" VSPACE="0" frameborder="no" border="0" marginwidth="0" marginheight="0" scrolling="no" style="Z-INDEX:989;opacity:0.5;background-color:#808080;LEFT: 0px;TOP:0px;WIDTH:100%;POSITION:relative;HEIGHT:100%;">' +
        '</div>');

        $("#iFrameLock").height(bgH);
        $("#iFrameLock").width(bgW);
        $("#divLock").height(bgH);
        $("#divLock").width(bgW);

        $("#iFrameLock").css("display", "block");
        $("#iFrameLock").css("background-color", "#000000");
        $("#iFrameLock").css("position", "absolute");
        $("#iFrameLock").css("z-index", "9988");
        $("#iFrameLock").css("top", "0px");
        $("#iFrameLock").css("left", "0px");
        $("#iFrameLock").css("opacity", "0.1");

        $("#divLock").css("display", "block");
        $("#divLock").css("background-color", "#000000");
        $("#divLock").css("position", "absolute");
        $("#divLock").css("z-index", "9989");
        $("#divLock").css("top", "0px");
        $("#divLock").css("left", "0px");
        $("#divLock").css("opacity", "0.5");
    }
    else {
        $("#iFrameLock").height(bgH);
        $("#iFrameLock").width(bgW);
        $("#divLock").height(bgH);
        $("#divLock").width(bgW);
    }

    $(window).resize(function (e) {
        if ($("#iFrameLock").length == 0) {
            return;
        }

        var clientH = $(window).height(); //浏览器高度
        var clientW = $(window).width(); //浏览器宽度
        var PageWidth = document.body.scrollWidth;
        var PageHeight = document.body.scrollHeight;
        var bgW = clientW > PageWidth ? clientW : PageWidth; //取有效宽
        var bgH = clientH > PageHeight ? clientH : PageHeight; //取有效高
        $("#iFrameLock").height(bgH);
        $("#iFrameLock").width(bgW);
        $("#divLock").height(bgH);
        $("#divLock").width(bgW);
    });
}

//清除背景锁定
function clearLockScreen() {
    $("#iFrameLock").remove();
    $("#divLock").remove();
}

function disableSelect() {
    for (var i = 0; i < document.all.length; i++) {
        if (document.all(i).tagName == "SELECT")
            document.all(i).disabled = true;
    }

}

function enableSelect() {
    for (var i = 0; i < document.all.length; i++) {
        if (document.all(i).tagName == "SELECT") {
            document.all(i).disabled = false;
        }
    }
}

function CloseDialog() {
    $byid("ModalDialog").hide();
}

function ShowDialog(aMessage) {
    //生成消息窗口
    rootpath = getroot();
    lockScreen();
    //disableSelect();
    var aObj = $ById("ModalDialog");

    if (aObj.length == 0) {
        var DialogDiv = ' <div id="ModalDialog" ' +
        '   style="Z-INDEX:9999; BORDER-RIGHT: #808080 2px solid; BORDER-TOP: #808080 2px solid; BACKGROUND: #ffffff; LEFT: 198px; BORDER-LEFT: #808080 2px solid; WIDTH: 477px; BORDER-BOTTOM: #808080 2px solid; POSITION: absolute; TOP: 254px; HEIGHT: 181px;display: none;"> ' +
        '	<div style="BORDER-RIGHT: medium none; BORDER-TOP: medium none;Z-INDEX:999; BACKGROUND: #990000; LEFT: px; BORDER-LEFT: medium none; WIDTH: 475px; BORDER-BOTTOM: medium none; POSITION: relative; TOP: 0px; HEIGHT: 30px"> ' +
        '	  <div style="DISPLAY: inline; FONT-SIZE: 9pt; Z-INDEX: 11; LEFT: 33px; WIDTH: 26px; COLOR: #ffffff;  POSITION: absolute; TOP: 7px; HEIGHT: 16px" align="center"  ms_positioning="FlowLayout">注意' +
        '      </div> ' +
        '    <img style="Z-INDEX:9999; LEFT: 6px; POSITION: absolute; TOP: 3px" alt="" ' +
        '        src="' +
        rootpath +
        'images/dialog24.gif" ismap="true">' +
        '    </div> ' +
        '	<div id="ModalDialogMsgText" style="Z-INDEX:90002;FONT-SIZE: 9pt; LEFT: 74px; OVERFLOW: auto; WIDTH: 371px;  POSITION: absolute; TOP: 46px; HEIGHT: 79px">' +
        '    </div> ' +
        '    <img style="Z-INDEX:9999; LEFT: 22px; POSITION: absolute; TOP: 46px" alt="" ' +
        '        src="' +
        rootpath +
        'images/msg.gif"> ' +
        '    <input id="ModalDiagCloseButton" style="BORDER-RIGHT: #808080 1px solid; BORDER-TOP: #808080 1px solid;margin: 0 0 0 0;padding-top:1;vertical-align: middle;FONT-SIZE: 9pt; Z-INDEX:999; BACKGROUND: #c00000; LEFT: 209px; BORDER-LEFT: #808080 1px solid; WIDTH: 63px; COLOR: #ffffff; BORDER-BOTTOM: #808080 1px solid; POSITION: absolute; TOP: 139px; HEIGHT: 23px" type="button" value="确定" size="32" >' +
        '    <iframe HSPACE="0" VSPACE="0" frameborder="no" border="0" marginwidth="0" marginheight="0" scrolling="no" style="Z-INDEX:-1;LEFT: 0px;TOP:0px;WIDTH:475px;POSITION:relative;HEIGHT:179px;">' +
        '    </iframe>' +
        ' </div>';
        $(document.body).append(DialogDiv);
    }
    $("#ModalDiagCloseButton").click(function () {
        CloseDialog();
        $ById("ModalDialog").remove();
        clearLockScreen();
        //$("#iFrameLock").remove();
        //enableSelect();
    });


    $ById("ModalDialogMsgText").html(aMessage);
    setcenter("ModalDialog");

    $ById("ModalDialog").show();

}

function ShowMassage(aMessage) {
    //生成消息窗口
    rootpath = getroot();
    //lockScreen();
    //disableSelect();
    var aObj = $ById("ModalDialog");

    if (aObj.length == 0) {
        var DialogDiv = ' <div id="ModalDialog" ' +
        '   style="Z-INDEX:9999; BORDER-RIGHT: #808080 2px solid; BORDER-TOP: #808080 2px solid; BACKGROUND: #ffffff; LEFT: 198px; BORDER-LEFT: #808080 2px solid; WIDTH: 477px; BORDER-BOTTOM: #808080 2px solid; POSITION: absolute; TOP: 254px; HEIGHT: 181px;display: none;"> ' +
        '	<div style="BORDER-RIGHT: medium none; BORDER-TOP: medium none;Z-INDEX:999; BACKGROUND: #990000; LEFT: px; BORDER-LEFT: medium none; WIDTH: 475px; BORDER-BOTTOM: medium none; POSITION: relative; TOP: 0px; HEIGHT: 30px"> ' +
        '	  <div style="DISPLAY: inline; FONT-SIZE: 9pt; Z-INDEX: 11; LEFT: 33px; WIDTH: 26px; COLOR: #ffffff;  POSITION: absolute; TOP: 7px; HEIGHT: 16px" align="center"  ms_positioning="FlowLayout">注意' +
        '      </div> ' +
        '    <img style="Z-INDEX:9999; LEFT: 6px; POSITION: absolute; TOP: 3px" alt="" ' +
        '        src="' +
        rootpath +
        'images/dialog24.gif" ismap="true">' +
        '    </div> ' +
        '	<div id="ModalDialogMsgText" style="Z-INDEX:90002;FONT-SIZE: 9pt; LEFT: 74px; OVERFLOW: auto; WIDTH: 371px;  POSITION: absolute; TOP: 46px; HEIGHT: 79px">' +
        '    </div> ' +
        '    <img style="Z-INDEX:9999; LEFT: 22px; POSITION: absolute; TOP: 46px" alt="" ' +
        '        src="' +
        rootpath +
        'images/msg.gif"> ' +
        '    <input id="ModalDiagCloseButton" style="BORDER-RIGHT: #808080 1px solid; BORDER-TOP: #808080 1px solid;margin: 0 0 0 0;padding-top:1;vertical-align: middle;FONT-SIZE: 9pt; Z-INDEX:999; BACKGROUND: #c00000; LEFT: 209px; BORDER-LEFT: #808080 1px solid; WIDTH: 63px; COLOR: #ffffff; BORDER-BOTTOM: #808080 1px solid; POSITION: absolute; TOP: 139px; HEIGHT: 23px" type="button" value="确定" size="32" >' +
        '    <iframe HSPACE="0" VSPACE="0" frameborder="no" border="0" marginwidth="0" marginheight="0" scrolling="no" style="Z-INDEX:-1;LEFT: 0px;TOP:0px;WIDTH:475px;POSITION:relative;HEIGHT:179px;">' +
        '    </iframe>' +
        ' </div>';
        $(document.body).append(DialogDiv);
    }
    $("#ModalDiagCloseButton").click(function () {
        CloseDialog();
        $ById("ModalDialog").remove();
        clearLockScreen();
        //enableSelect();
    });


    $ById("ModalDialogMsgText").html(aMessage);
    setcenter("ModalDialog");

    $ById("ModalDialog").show();

}

function PopMessage(aMsg) {
    //显示消息
    //var dlg = $byid("MsgPopup");
    if (MsgPopup != null) {
        MsgPopup.SetWidth(420);
        MsgPopup.SetHeight(150);
        MsgPopup.SetContentHtml(aMsg);
        MsgPopup.Show();
    }
    else
        ShowMassage(aMsg);
}

function HideMessage() {
    if (MsgPopup != null) {
        MsgPopup.Hide();
    }
}



